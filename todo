### main idea for application 
  1. Create a snipped
  2. read (see) the snippet
  2. update a snippet
  3. delet a snippet

### Main view for when a person first visits the page for first time
  1. button to login
  2. button to create account 
  3. only show this view if the person is not logged in. 
  4. view created snippets from other users
  5. do not show button tpo update or delete.

### login  
  [x] a. prevent submit
  [x] 1. view for login 
  [x] 2. in header make button to log out 
  [X]  3. add flash messaqge when user is logged in

### create account
  [X] 1. user should be able to create account
  [X] 2. hash password!
  [x] 3. add flash message when account is created !!!
  [] 4. inform user if password is to short 
  [x] 5. send message is username is already taken
  
### logout
  [x] 1. User should be able to logout!

### Auth
  [x] 0. if user is auth + user id is the same as created user id, then let them edit and delete
  [x] 1. allow user to create snippet and see other snippets.
  [x] 2. allow user to edit own snippet
  [x] 2. allow user to delete own snippet

### nav bar
  [x] 1. if logged in, show navbar 

### error 
  [x] 1. 404.html
  [x] 2. 500.hbs - för att skcika data
  [] 3. RENDER ERROR PAGE WHEN ERROR OCCUSRS!


### .env
  [x] 1. change to port to env string 


för att se vad som finns i databasen --->
    const viewData = {
    users: (await User.find({}))
      .map(user => ({
        id: user._id,
        username: user.username,
        password: user.password
      }))
  } 


  
  /**
   * Authenticate user: check if email and passowrd is correct.
   *
   * @param {*} req req.
   * @param {*} res res.
   * @param {*} next func.
   */
  /* async login2 (req, res, next) {
    const { username, password } = req.body
    try {
      const user = User.authenticate(username, password)
      req.session.regenerate(() => {
        req.session.authenticated = true
        req.session.username = user.username
        req.session.userId = user._id
        req.session.flash = { type: 'success', text: 'Login successful.' }
        res.redirect('./login-form')
      })
    } catch (error) {
      const validationErrors = ['Invalid username/password.']
      res.render('./', {
        validationErrors,
        data: { username: username }
      })
      console.log(error)
    }
  } */


  /**
   * Renders a view, based on posted data, and send the rendered HTML as sting as an http response.
   *
   * @param {object} req - Express request obj.
   * @param {object} res - Express response obj.
   */
  /* async indexPost (req, res) {
    const viewData = {
      name: req.body.name,
      title: req.body.title,
      description: req.body.description,
      dayName: moment().format('dddd')
    }
    console.log(viewData)
    const isLoggedin = { auth: req.session.authenticated }
    res.render('snippets/index', { viewData, isLoggedin })
  } */